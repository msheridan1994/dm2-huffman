#+TITLE: DM2 Assignment 09.3
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]
[[elisp:(progn%20(save-buffer)%20(browse-url-of-file%20(org-html-export-to-html)))][Export to HTML and Browse]]
[[elisp:(progn%20(save-buffer)%20(org-clock-report%201)%20(save-buffer))][Insert/Update Clock Summary Report]]
* DONE Explore Huffman Trees and Huffman Codes
  CLOSED: [2019-03-08 Fri 23:06]
  Your task is to compress a /special piece of information/ as compactly as
  possible, *give its encoding* and *calculate its compression ratio*.

  Recall that the *compression ratio* of an encoding is the percentage
  \(\frac{(f - v)}{f} \times 100\), where /f/ is the number of bits per symbol of the
  smallest *fixed*-length encoding, and /v/ is the average number of bits per
  symbol with the Huffman encoding.

  For example, if there were 9 different symbols in a message, \(f=4\) is the
  number of bits of the smallest fixed-length encoding, because 2^3 = 8 (not
  enough for 9) and 2^4 = 16 (enough and to spare). If the Huffman encoding of
  the message had \(v=3.12\), the compression ratio would be

  \(\frac{4 - 3.12}{4} \times 100\ \approx 22\%.\)

  The /special piece of information/ you are tasked to compress is a list of the
  first ten million primes. This is a list that starts

  |  2 |
  |  3 |
  |  5 |
  |  7 |
  | 11 |
  | 13 |
  | 17 |
  | 19 |
  | 23 |
  | 29 |

  and ends

  | 179424551 |
  | 179424571 |
  | 179424577 |
  | 179424601 |
  | 179424611 |
  | 179424617 |
  | 179424629 |
  | 179424667 |
  | 179424671 |
  | 179424673 |

  As ASCII text stored in a file with one prime per line, the size of this data
  file is slightly over 89 megabytes. The goal is to compress this down to just
  over 5 megabytes (5589056 bytes, to be exact). That\rsquo{}s a 94% compression ratio!

  Standard compression tools can only get about a 73% compression ratio for this
  ASCII data. A more clever approach is needed. Instead of compressing the list
  of prime numbers, compress a list of the /gaps/ between them!

  It doesn\rsquo{}t save much, just the unique (occurring only once) gap size of 1
  between 2 and 3, but in the spirit of de Polignac\rsquo{}s conjecture that every
  /even/ number appears infinitely often as a gap between consecutive primes,
  just consider the even-sized gaps. The result will be a list that starts with
  2 (the difference between 5 and 3), 2 (the difference between 7 and 5), 4 (the
  difference between 11 and 7), 2 (the difference between 13 and 11), 4 (the
  difference between 17 and 13), 2 (the difference between 19 and 17), 4 (the
  difference between 23 and 19), and 6 (the difference between 29 and 23).

  Generating this data is the first task. The algorithm for doing so is very
  straightforward:

  1. Find the gaps between consecutive odd primes.
  2. Store these gaps as a list of even numbers.

  Tabulating the results, the first ten gaps are as follows, where the last
  column is the list to keep:

  |  5 | - |  3 | = | 2 |
  |  7 | - |  5 | = | 2 |
  | 11 | - |  7 | = | 4 |
  | 13 | - | 11 | = | 2 |
  | 17 | - | 13 | = | 4 |
  | 19 | - | 17 | = | 2 |
  | 23 | - | 19 | = | 4 |
  | 29 | - | 23 | = | 6 |
  | 31 | - | 29 | = | 2 |
  | 37 | - | 31 | = | 6 |

  And the last ten:

  | 179424551 | - | 179424533 | = | 18 |
  | 179424571 | - | 179424551 | = | 20 |
  | 179424577 | - | 179424571 | = |  6 |
  | 179424601 | - | 179424577 | = | 24 |
  | 179424611 | - | 179424601 | = | 10 |
  | 179424617 | - | 179424611 | = |  6 |
  | 179424629 | - | 179424617 | = | 12 |
  | 179424667 | - | 179424629 | = | 38 |
  | 179424671 | - | 179424667 | = |  4 |
  | 179424673 | - | 179424671 | = |  2 |

  As a check, see if the generated list of gaps has length 9999998.

  The next step is to count how many times each gap size occurs, so that for the
  Huffman encoding scheme, the larger the frequency of occurrence, the smaller
  the number of bits encoding that gap size.

  As a correctness check, here are the first ten gap counts:

  | Gap |   Count |
  |-----+---------|
  |   2 |  738597 |
  |   4 |  738717 |
  |   6 | 1297540 |
  |   8 |  566151 |
  |  10 |  729808 |
  |  12 |  920661 |
  |  14 |  503524 |
  |  16 |  371677 |
  |  18 |  667734 |
  |  20 |  354267 |

  And the last ten:

  | Gap | Count |
  |-----+-------|
  | 190 |     1 |
  | 192 |     3 |
  | 194 |     1 |
  | 196 |     1 |
  | 198 |     6 |
  | 202 |     2 |
  | 204 |     3 |
  | 210 |     4 |
  | 220 |     1 |
  | 222 |     1 |

  Note two things from these partial gap counts:

  1. Small even numbers (< 100) are well represented, larger ones (< 1000) less
     so.
  2. Ten million primes aren\rsquo{}t enough to have /every/ even number represented;
     for example, 200, 206, 208, 212, 214, 216 and 218 do not appear even once.

* DONE Study and Extend Some Sample Code
  CLOSED: [2019-03-08 Fri 23:06]
  As you are required to build an elisp-structured Huffman tree that can
  compress the list of primes, use the following code block as a guide and a
  starting point. You are given code for creating a list of gaps between the
  first ten million primes, and for restoring a list (not a vector) of the first
  ten million primes from that list of gaps.

  This code also shows a possible implementation of a tree node as a symbol. The
  symbol\rsquo{}s value is the node\rsquo{}s value. The symbol\rsquo{}s plist (property list) is used
  for storing \ldquo{}pointers\rdquo to left and right children, and parent.

#+BEGIN_SRC elisp :results silent
  (require 'cl)

  (require 'first-ten-million-primes)

  (defun list-the-gaps ()
    "Create a list of the gaps between the first ten million primes.
     Depends on the first-ten-million-primes vector."
    (loop with curr = 0
          with prev = 3
          with gap = 0
          for i from 2 upto (1- (length first-ten-million-primes))
          do (setq curr (elt first-ten-million-primes i)
                   gap (- curr prev)
                   prev curr)
          collect gap))

  (setq node-counter 0)

  (defun make-node ()
    (let ((symbol (make-symbol (concat "n" (number-to-string node-counter)))))
      (set symbol node-counter)
      (incf node-counter)
      symbol))

  (defun get-value (node)
    (and (symbolp node) (get node :frequency)))

  (defun set-value (node new-value)
    (and (symbolp node) (put node :frequency new-value)))

  (defun get-parent (node)
    (and (symbolp node) (get node :parent)))

  (defun set-parent (node parent)
    (and (symbolp node) (symbolp parent) (put node :parent parent)))

  (defun get-left (node)
    (and (symbolp node) (get node :left)))

  (defun set-left (node left)
    (and (symbolp node) (symbolp left) (put node :left left)))

  (defun get-right (node)
    (and (symbolp node) (get node :right)))

  (defun set-right (node right)
    (and (symbolp node) (symbolp right) (put node :right right)))

  (defun link-children-and-parent (parent left right)
    (and (symbolp parent) (symbolp left) (symbolp right)
      (progn
        (put parent :left left)
        (put parent :right right)
        (put left :parent parent)
        (put right :parent parent))))

  (defun build-tree (height)
    (let ((root (make-node)))
      (if (> height 0)
          (let ((left (build-tree (1- height)))
                (right (build-tree (1- height))))
            (set-left root left)
            (set-right root right)
            (set-parent left root)
            (set-parent right root)))
      root))
#+END_SRC

* The Functions
*** The Function Block
    This massive code block contains a plethora of functions that implement the functionality we
    need in order to create Huffman tress so that the list of prime numbers can be compressed.
    Some of the code included in the original assignment document has been included again to make
    it easy to load all of the needed functions when opening the document.

#+BEGIN_SRC elisp :results silent

  (require 'cl)

  (require 'first-ten-million-primes)

  (defun list-the-gaps ()
    "Create a list of the gaps between the first ten million primes.
     Depends on the first-ten-million-primes vector."
    (loop with curr = 0
          with prev = 3
          with gap = 0
          for i from 2 upto (1- (length first-ten-million-primes))
          do (setq curr (elt first-ten-million-primes i)
                   gap (- curr prev)
                   prev curr)
          collect gap))

   (defun make-node ()
    (let ((symbol (intern (concat "n" (number-to-string node-counter)))))
      (setf (symbol-plist symbol) nil)
      (set symbol node-counter)
      (incf node-counter)
      symbol))
      
   (defun make-node-with-properties (length frequency)
     (let ((symbol (intern (concat "n" (number-to-string node-counter)))))
       ;; If the symbol already exists in the obarray, it may not have an empty property list
       ;; clear property list of interned symbol
       (setf (symbol-plist symbol) nil)
       (set symbol frequency)
       ;; set the gap-length (of the node) in the node's plist
       (put symbol :gap-length length)
       ;; set the frequency (of the node) in the node's plist
       (put symbol :frequency frequency)
       ;; set an empty code in the plist
       (put symbol :code "")
       (incf node-counter)
       symbol))

  (defun get-value (node)
    (and (symbolp node) (get node :frequency)))

  (defun set-value (node new-value)
    (and (symbolp node) (put node :frequency new-value)))

  (defun get-parent (node)
    (and (symbolp node) (get node :parent)))

  (defun set-parent (node parent)
    (and (symbolp node) (symbolp parent) (put node :parent parent)))

  (defun get-left (node)
    (and (symbolp node) (get node :left)))

  (defun set-left (node left)
    (and (symbolp node) (symbolp left) (put node :left left)))

  (defun get-right (node)
    (and (symbolp node) (get node :right)))

  (defun set-right (node right)
    (and (symbolp node) (symbolp right) (put node :right right)))

  (defun link-children-and-parent (parent left right)
    (and (symbolp parent) (symbolp left) (symbolp right)
      (progn
        (put parent :left left)
        (put parent :right right)
        (put left :parent parent)
        (put right :parent parent))))

  (defun build-tree (height)
    (let ((root (make-node)))
      (if (> height 0)
          (let ((left (build-tree (1- height)))
                (right (build-tree (1- height))))
            (set-left root left)
            (set-right root right)
            (set-parent left root)
            (set-parent right root)))
      root))

;    BELOW THIS LINE IS THE CODE THAT US STUDENTS HAVE WRITTTEN
;---------------------------------------------------------------------
  ;; Set node-counter to 0 so that the nodes 
  ;; have n0+ names rather than much larger ones.
  (setq node-counter 0)

  (defun make-frequency-table (lst-of-gaps)
    "Make it!"
    (let ((freq-table (make-hash-table)))
      (loop for gap in lst-of-gaps
            do (incf (gethash gap freq-table 0)))
    freq-table))

  (defun make-node-list-from-table (ft)
    (setq node-counter 0)
    (loop for key being the hash-keys of ft 
          using (hash-value value)
          collect (make-node-with-properties key value)))

  (defun new-make-node (gap-size frequency)
    (let ((symbol (intern (concat "n" (number-to-string node-counter)))))
         (incf node-counter)
         (setf (symbol-plist symbol) nil)
         (put symbol :gap gap-size)
         (set symbol frequency)
         (put symbol :code "")
         symbol))

  (defun make-node-list-from-table-maphash (ft)
    (let ((node-list nil))
      (maphash (lambda (key val) (push (new-make-node key val) node-list))
               ft)
     node-list))

  (defun compare-nodes (node1 node2)
     (<= (symbol-value node1) (symbol-value node2)))

  (defun append-code-to-subtree (strCode node)
    ;; add it to this tree
    ;; pass it on to the children if they exist..
    (if (not (eq nil (get node :left))) 
      (append-code-to-subtree strCode 
        (get node :left)))
    (if (not (eq nil (get node :right)))
      (append-code-to-subtree strCode 
        (get node :right)))
    (if (eq nil (get node :code)) (put node :code ""))
    (put node :code 
      (concat strCode 
              (get node :code))))

  (defun sym-greater-than (n1 n2)
    (and (integerp (get-value n1)) (integerp (get-value n2))
    (< (get-value n1) (get-value n2))))

  ;;;; PSEUDOCODE ==> Supplied by Brother Neff in his textbook.
  ;; 
  ;; Algorithm Huffman Tree (inputs and initialization of Q as above)
  ;; while Q has more than one element do
  ;;    TL ← the minimum-weight tree in Q
  ;;    Delete the minimum-weight tree in Q
  ;;    TR ← the minimum-weight tree in Q
  ;;    Delete the minimum-weight tree in Q
  ;;    Create a new tree T with TL and TR as its left and right subtrees,
  ;;    and weight equal to the sum of TL’s weight and TR’s weight.
  ;;    Insert T into Q.
  ;; return T
  (defun make-huffman-tree (lst-of-nodes) 
    (let* ((Q lst-of-nodes)
           (T nil)
           (TL nil)
           (TR nil)
           (sum 0))
      (while (> (length Q) 1)
        (setq Q (sort Q 'sym-greater-than)) 
        (setq TL (pop Q))
        (setq TR (pop Q))
        (setq T (make-node))
        (set-value T
                   (+ (get-value TL)
                      (get-value TR)))
        (link-children-and-parent T TL TR)
        ;; HANDLE tree-leaves (initialize code to "")
        (if (eq nil (get TL :code)) (put TL :code ""))
        (if (eq nil (get TR :code)) (put TR :code ""))
        ;; add "0" to all SUBTREES on the LEFT LEFTs
        (append-code-to-subtree "0" TL)
        ;; add "1" to all RIGHTs
        (append-code-to-subtree "1" TR)
        ;; determine 
        
        (setq Q (cons T Q))
        ;;(setq sum (+ 1 sum)) ;; count how many iterations we get through..
        )

      (car Q)
      ))

  ;;;; PSEUDOCODE
  ;; ==> get h-tree, return list of codes (gap . code)
  ;; traverse the tree....
  ;; build the code...
  ;; START with an empty string.
  ;; traverse the tree (recursive)
  ;; Add 0's when you go LEFT, 
  ;; Add 1's when you go RIGHT,
  ;; GENERATE A BIT STRING FOR EVERY LEAF-NODE (not  (AND ADD TO THE LIST)
  (defun get-a-gap-code-table ()
    (let* ((nodes backup-list-of-nodes))
      (loop for node in nodes
            collect 
            (cons (get node :gap-length)
                  (get node :code)
                  ))))

  (defun get-code-of-gap (gapNum)
    (cdr (assoc gapNum gap-code-table))
  )

  ;;;; PSEUDOCODE
  ;; Start an empty string
  ;; Loop through the list of gaps
    ;; for the given gap
    ;; find the code associated with that gap.
    ;; append that code to the accumulated encoded string.

;ENCODING FUNCTION (Mapping Version)
;---> Some serious help from Bro Neff here. 
  (defun get-encoded-primes () 
    (mapconcat
      ;; FUNCTION
      (lambda (gap-size) (get-code-of-gap gap-size))
      ;; SEQUENCE
      list-of-gaps
      ;; SEPARATOR
      ""
      )
    )
#+END_SRC

*** =setq= Definitions
    These =setq= definitions have been separated from the main function block
    to make sure people don't have to wait for these to run when they want to
    make changes to function definitions.

#+BEGIN_SRC elisp
  (setq list-of-gaps (list-the-gaps)
        len (length list-of-gaps))

  ; Set the hashmap as a global value
  (setq f-table (make-frequency-table list-of-gaps))   

  (setq list-of-nodes (make-node-list-from-table f-table))

  (setq backup-list-of-nodes 
    (loop for sym in list-of-nodes
          collect sym))

  (setq huffman-tree (make-huffman-tree list-of-nodes))
  
  (setq gap-code-table (get-a-gap-code-table))

  (setq encoded-primes (get-encoded-primes)
        len-encoded (length encoded-primes))

#+END_SRC

#+RESULTS:
: 44712373

* Our Report
** Explore Huffman Trees and Huffman Codes
*** Make-Frequency-Table

--> Create the frequency table.
#+BEGIN_SRC elisp
  (setq f-table (make-frequency-table list-of-gaps))   
#+END_SRC

#+RESULTS:
: #s(hash-table size 145 test eql rehash-size 1.5 rehash-threshold 0.8125 data (2 738597 4 738717 6 1297540 8 566151 14 503524 10 729808 12 920661 18 667734 20 354267 22 307230 34 129043 24 453215 16 371677 26 211203 28 229177 30 398713 32 123123 36 206722 44 64866 42 159956 40 111546 52 38800 48 93693 38 94682 72 17255 50 52183 62 16763 54 64157 60 55305 58 27985 46 54931 56 32224 64 17374 68 12368 86 3411 66 30960 70 17475 78 13758 76 7253 82 4791 96 3544 112 711 100 1923 74 8540 90 7056 84 9818 114 1125 80 6760 88 3454 98 1831 92 2259 106 933 94 2058 118 433 132 301 104 1168 102 2374 110 941 126 533 120 948 148 67 108 1634 122 287 138 210 128 183 154 43 130 211 116 439 146 46 136 100 124 318 134 128 140 140 152 52 142 90 144 123 150 94 180 10 156 57 164 20 210 4 170 18 160 27 182 5 168 25 176 11 172 4 162 27 178 12 198 6 220 1 158 19 174 10 196 1 184 4 166 9 202 2 204 3 222 1 192 3 188 1 190 1 186 3 194 1))

--> Show the last several lines.
#+BEGIN_SRC elisp
   (subseq list-of-gaps 9999988) 
#+END_SRC

#+RESULTS:
| 18 | 20 | 6 | 24 | 10 | 6 | 12 | 38 | 4 | 2 |

--> Here is the result.
#+BEGIN_SRC elisp
  f-table
#+END_SRC

#+RESULTS:
: #s(hash-table size 145 test eql rehash-size 1.5 rehash-threshold 0.8 data (2 738597 4 738717 6 1297540 8 566151 14 503524 10 729808 12 920661 18 667734 20 354267 22 307230 34 129043 24 453215 16 371677 26 211203 28 229177 30 398713 32 123123 36 206722 44 64866 42 159956 40 111546 52 38800 48 93693 38 94682 72 17255 50 52183 62 16763 54 64157 60 55305 58 27985 46 54931 56 32224 64 17374 68 12368 86 3411 66 30960 70 17475 78 13758 76 7253 82 4791 96 3544 112 711 100 1923 74 8540 90 7056 84 9818 114 1125 80 6760 88 3454 98 1831 92 2259 106 933 94 2058 118 433 132 301 104 1168 102 2374 110 941 126 533 120 948 148 67 108 1634 122 287 138 210 128 183 154 43 130 211 116 439 146 46 136 100 124 318 134 128 140 140 152 52 142 90 144 123 150 94 180 10 156 57 164 20 210 4 170 18 160 27 182 5 168 25 176 11 172 4 162 27 178 12 198 6 220 1 158 19 174 10 196 1 184 4 166 9 202 2 204 3 222 1 192 3 188 1 190 1 186 3 194 1))

*** Make-Node-List-From-Table

--> Here is an example of the maphash function.
(It is important to note that this is an example of the maphash function except it returns nil and has no other collection mechanism.)
#+BEGIN_SRC elisp :results silent
  (maphash (lambda (key val)
            (list "cstring" key val))
   f-table)
#+END_SRC

--> Here is an example of looping over both keys and values.
#+BEGIN_SRC elisp :results silent
  (loop for key being the hash-keys of f-table 
        using (hash-value value)
        collect (list key value))
#+END_SRC

--> Let's make the list of nodes!
#+BEGIN_SRC elisp
  (setq list-of-nodes (sort (make-node-list-from-table f-table) 'compare-nodes)
        number-of-nodes (length list-of-nodes))
#+END_SRC

#+RESULTS:
: 104

*** Make-Huffman-Tree

#+BEGIN_SRC elisp
  ;; We will recreate the list-of-nodes (which restarts the node-counter).
  (setq list-of-nodes (make-node-list-from-table f-table))
  (setq backup-list-of-nodes 
    (loop for sym in list-of-nodes
          collect sym))
  (setq huffman-tree (make-huffman-tree list-of-nodes))
#+END_SRC
#+RESULTS:
: n206

--> Now we will investigate the results.
#+BEGIN_SRC elisp :results silent
  (loop for s in backup-list-of-nodes
        collect (symbol-plist s))
#+END_SRC
#+BEGIN_SRC elisp
  (list (length list-of-nodes)
        (length backup-list-of-nodes)
        list-of-nodes
        backup-list-of-nodes)
#+END_SRC

#+RESULTS:
| 18 | 104 | (n0 n1 n192 n193 n6 n194 n195 n196 n2 n197 n198 n199 n200 n201 n202 n203 n204 n205) | (n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13 n14 n15 n16 n17 n18 n19 n20 n21 n22 n23 n24 n25 n26 n27 n28 n29 n30 n31 n32 n33 n34 n35 n36 n37 n38 n39 n40 n41 n42 n43 n44 n45 n46 n47 n48 n49 n50 n51 n52 n53 n54 n55 n56 n57 n58 n59 n60 n61 n62 n63 n64 n65 n66 n67 n68 n69 n70 n71 n72 n73 n74 n75 n76 n77 n78 n79 n80 n81 n82 n83 n84 n85 n86 n87 n88 n89 n90 n91 n92 n93 n94 n95 n96 n97 n98 n99 n100 n101 n102 n103) |

*** Get-A-Gap-Code-Table

--> Here we use the get-a-gap-code-table function.
#+BEGIN_SRC elisp
  (setq gap-code-table (get-a-gap-code-table))
#+END_SRC

#+RESULTS:
: ((2 . 1100) (4 . 1101) (6 . 100) (8 . 0101) (14 . 0100) (10 . 1011) (12 . 000) (18 . 0111) (20 . 10101) (22 . 01101) (34 . 011000) (24 . 0010) (16 . 11100) (26 . 111110) (28 . 111111) (30 . 11101) (32 . 001110) (36 . 111101) (44 . 0011111) (42 . 101000) (40 . 001100) (52 . 01100111) (48 . 1010010) (38 . 1010011) (72 . 011001011) (50 . 11110001) (62 . 011001010) (54 . 0011110) (60 . 11110011) (58 . 00110101) (46 . 11110010) (56 . 01100100) (64 . 011001100) (68 . 1111000010) (86 . 00110100100) (66 . 00110110) (70 . 011001101) (78 . 001101000) (76 . 0011011101) (82 . 11110000001) (96 . 00110111000) (112 . 11110000110100) (100 . 001101111001) (74 . 0011011111) (90 . 0011010011) (84 . 1111000001) (114 . 0011011110111) (80 . 11110000111) (88 . 00110100101) (98 . 001101110011) (92 . 111100000000) (106 . 0011011100101) (94 . 001101111010) (118 . 111100001101011) (132 . 111100001100100) (104 . 1111000011000) (102 . 111100000001) (110 . 0011011110000) (126 . 00110111101100) (120 . 0011011110001) (148 . 00110111101101001) (108 . 1111000011011) (122 . 001101111011011) (138 . 1111000011010101) (128 . 1111000011001110) (154 . 111100001100101110) (130 . 001101110010010) (116 . 00110111001000) (146 . 111100001101010000) (136 . 11110000110101001) (124 . 111100001100110) (134 . 0011011110110101) (140 . 1111000011001010) (152 . 00110111001001100) (142 . 11110000110011110) (144 . 0011011100100111) (150 . 11110000110011111) (180 . 11110000110010110011) (156 . 00110111101101000) (164 . 1111000011001011011) (210 . 001101110010011011111) (170 . 1111000011001011000) (160 . 1111000011010100011) (182 . 111100001100101111010) (168 . 1111000011010100010) (176 . 11110000110010111110) (172 . 001101110010011011100) (162 . 001101110010011010) (178 . 11110000110010111111) (198 . 00110111001001101100) (220 . 00110111001001101101100) (158 . 1111000011001011010) (174 . 11110000110010111100) (196 . 00110111001001101101101) (184 . 001101110010011011101) (166 . 11110000110010110010) (202 . 0011011100100110110111) (204 . 1111000011001011110110) (222 . 00110111001001101111010) (192 . 1111000011001011110111) (188 . 00110111001001101111011) (190 . 00110111001001101111000) (186 . 001101110010011011010) (194 . 00110111001001101111001))

--> Now we will investigate the results.
#+BEGIN_SRC elisp :results silent
  (subseq gap-code-table 0 4)
#+END_SRC

*** Encode the Data (the first-ten-million-primes (List-of-Gaps))

--> Here we verify that the get-code-of-gap function works.
#+BEGIN_SRC elisp
  (list (get-code-of-gap 6)
        (get-code-of-gap 12)
        (get-code-of-gap 2)
        (get-code-of-gap 4))
#+END_SRC

#+RESULTS:
| 100 | 000 | 1100 | 1101 |


#+BEGIN_SRC elisp
  (setq encoded-primes (get-encoded-primes)
        len-encoded (length encoded-primes))
#+END_SRC

#+RESULTS:
: 44712373

*** Encode-First-Ten-Million-Primes Function

    Encapsulate steps #1-5 in a function.

    This requires running almost all of the source blocks previous to this.

#+BEGIN_SRC elisp :results raw
  (let ((x 5))

    ;; We will redo the list-of-nodes (which restarts the node-counter).
    (setq list-of-nodes (make-node-list-from-table f-table))
    ;; We need a backup list so that we don't kill it as we go through
    ;; the huffman-tree-building algorithm.
    (setq backup-list-of-nodes
          (loop for sym in list-of-nodes
                collect sym))
    (setq huffman-tree (make-huffman-tree list-of-nodes))
    (setq gap-code-table (get-a-gap-code-table))

    (setq encoded-primes (get-encoded-primes)
          len-encoded (length encoded-primes))
    len-encoded
  )
#+END_SRC

#+RESULTS:
44712373

There are 44712373 bits in the Huffman encoding of the first ten million primes.

** Calculate Compression Ratios (and sizes)
*** Number of Keys in the Hashtable of Gap Sizes
   : I correctly calculated the number of keys in the hashtable of gap sizes.

#+BEGIN_SRC elisp
; This tells how many different keys we must encode
(length backup-list-of-nodes)
#+END_SRC

#+RESULTS:
: 104

*** Bits per Key with Fixed Encoding
   : I correctly calculated the number of bits per key with a fixed encoding. 
   There are 104 different keys in our hashtable so we need ceiling(log_{2}104)
   bits to hold them all. There will be some unused bits afterward, but we will
   be able to represent every key in our table with a unique bitcode.

   | # bits | max # keys |
   |--------+------------|
   |      1 |          2 |
   |      2 |          4 |
   |      3 |          8 |
   |      4 |         16 |
   |      5 |         32 |
   |      6 |         64 |
   |      7 |        128 | <-- This is greater than 104, so we have our number!

   We will need *7* bits to represent every key code in our hash table of
   gaps between prime numbers.

   Here are some examples of *7* bit encodings:

   | key | bitcode |
   |-----+---------|
   |   2 | 0000001 |
   |   4 | 0000010 |
   |   6 | 0000011 |
   |   8 | 0000100 |
   |  14 | 0000101 |
   |  10 | 0000110 |
   |  12 | 0000111 |
   |  18 | 0001000 |
   |  20 | 0001001 |
   |  22 | 0001010 |
   |  34 | 0001011 |
   |  24 | 0001100 |
   |  16 | 0001101 |
   |  26 | 0001110 |
   |  28 | 0001111 |
   |  30 | 0010000 |
   |     |    etc. |
 
*** Total Number of Bits (Huffman Encoding)
   : I correctly calculated the total number of bits encoded with the Huffman
   : encoding.

   #+BEGIN_SRC elisp
   ; v is the average number of bits per symbol in Huffman
   ; 83,484,449 is the number of symbols in the prime list

   (setq encoded-huffman-bits 44712373.0)
   (setq huffman-percentage (/ encoded-huffman-bits 83484449.0))
   #+END_SRC

   #+RESULTS:
   : 0.5355772666116536

*** Total Number of Bits (Fixed Key Encoding)
   : I correctly calculated the total number of bits encoded with the fixed 
   : encoding. 
  
   Our encoding scheme has been determined. Now, the question is: how do we encode all 10 million primes?
   We just need to write down the spaces between the primes, so we would
   need 9,999,999 consecutive sections of 7 bits; where each 7-bit segment
   encodes the jump from the previous prime number to the next prime number. We
   only need one less than the number of numbers because of the last prime number
   does not need a 7-bit jump to the 10,000,001^st prime number.

   7 x 9,999,999 = *69,999,993* bits

*** Total Number of Bits (32-Binary Encoding)
   : I correctly calculated the size of the first ten million primes encoded
   : as 32-bit integer binary data.

   Each prime number is a 32-bit integer (binary), and there are 10 million
   primes, that means there are 32 x 10 million = *320,000,000* bits used.

*** Total Number of Bits (ASCII Encoding)
   : I correctly calculated the size of the first ten million primes encoded
   : as ASCII data.
   
   Extended ASCII (which most OS use now) uses 8 bits per character, so with 10
   million primes, each with at least one character, that's already 80 million
   bits. In addition to that (in windows) there are two whitespace characters
   (CRLF) at the end of each line, so that's an additional 8 x 10,000,000 x 2 =
   160,000,000 bits!

   There we already have 240,000,000 bits, and that doesn't even take into
   account the number of characters required for each prime number. The biggest
   prime (17,9424,673) uses 9 characters (without commas) and so requires 72
   bits all to itself!

  #+BEGIN_SRC elisp
    ; Code to calculate the number of bits in the ascii representations of numbers
    (loop for i from 1 upto (1- (length first-ten-million-primes)) do (setq curr (elt first-ten-million-primes i)) sum (- (loop for char in (split-string (number-to-string curr) "") count char) 2))

    ; floor(log_10 n) + 1 this would simplify my second loop quite a bit: sum (1+
    ; (floor (log_10 curr)))
  #+END_SRC

   #+RESULT:
   : 83,484,449 characters in the list of primes

   #+BEGIN_SRC elisp
   ; Spacemacs adds an extra LF at the end of the file
   ; Multiply by 8 because ASCII characters are each a byte

   ; Windows machine
   ; Whitespace characters are x2 because windows uses CRLF
   ;(* (1+ (+ 83484449 (* 10000000 2))) 8)

   ; Unix machine
   ; Whitespace characters are one per prime (LF)
   (* (1+ (+ 83484449 10000000)) 8)

   ; Just the primes
   (* 83484449 8)
   #+END_SRC

   #+RESULT-JUST-THE-PRIMES:
   : 667,875,592

   #+RESULT-IN-UNIX:
   : 747,875,600

   #+RESULT-IN-WINDOWS:
   : 827,875,600

   Theoretically, the resulting ASCII encoding should be 827,875,592 bits, but
   vi and other editors append an extra (LF) character to the end of your file,
   so 827,875,600 bits.

   Checking in a windows system we find the resulting size of ASCII characters
   to represent these primes is 827,875,600 bits as a text file in windows,
   which is exactly what we expected!

   In a Unix style operating system the line ending would be encoded as (LF)
   only and will result in a smaller file: 747,875,600 bits.

   After discussion in class, we will use the Unix encoding (with the extra LF
   from emacs file creation) *747,875,600* bits.

   Just the primes = 667,875,592 bits (with no (CR) or (LF) characters).

*** Compression Ratio (Fixed to Huffman)
   : I correctly calculated the compression ratio from this fixed encoding.

   The compression ratio of an encoding is the percentage ((f−v)/f)⋅100, where f is
   the number of bits per symbol of the smallest fixed-length encoding, and v is
   the average number of bits per symbol with the variable-length (e.g. Huffman)
   encoding.
   
   #+BEGIN_SRC elisp :results silent
   ;; f = number of bits per symbol of fixed length encoding
   ;; v = average number of bits per symbol for Huffman encoding
   (defun compression-ratio (f v)
      (* (/ (- f v) f) 100))
   #+END_SRC

   #+BEGIN_SRC elisp
     ; Total size / number of characters. this is encoded as gaps instead of the
     ; prime numbers, that way we can use 7 bits instead of a fixed number of bits
     ; that fits the largest prime in it.
     (compression-ratio (/ (* 7.0 9999998.0) 83484449.0)  huffman-percentage)
   #+END_SRC

   #+RESULTS:
   : 36.12516865360516

   36%

*** Compression Ratio (binary to huffman)
   : I correctly calculated the compression ratio from the binary size.

   #+BEGIN_SRC elisp
   ; Total size in bits = 32 bits per prime number * number of prime numbers
   ; f = total size / number of characters
   (compression-ratio (/ (* 32.0 10000000.0) 83484449.0) huffman-percentage)
   #+END_SRC

   #+RESULTS:
   : 86.0273834375

   86%

*** Compression Ratio (ASCII to huffman)
   : I correctly calculated the compression ratio from the ASCII size (just
   : the primes, nothing else).

   #+BEGIN_SRC elisp
   ; This is the total size in bits divided by the number of characters
   (compression-ratio (/ 747875600.0 83484449.0) huffman-percentage)
   #+END_SRC

   #+RESULTS:
   : 94.02141572742848

   94%

** Connections

   Most of us were first exposed to Huffman trees in CS235 where we had 
   the chance to learn about this algorithm and how to build this data 
   structure. At the time, most of us were still very uncomfortable with 
   Huffman trees and how to implement them. As we did this project, we 
   gained a much deeper understanding of the algorithm and feel much more 
   comfortable being able to implement this algorithm into our code for 
   any real-world problem we may come across in the future.

** Contributors
   Everyone in the class participated through discord and in class. We used
   GitHub and Google Sheets to track the contributions made by each student.
   Some groups of students worked on the same commit. These cases are specified
   in the spreadsheet and in pull requests.
   The spreadsheet can be viewed here: 
https://docs.google.com/spreadsheets/d/1gE7EWgS4wIwk83Ihqh6C-AOfHSLGAsq9a2HcooQcQw4/edit?usp=sharing

   The information from that spreadsheet is included here for your convenience:

| Classmates           | Did Participate (YES/NO) | Things I did to Help                                                               | Contributions in ORG doc        |
|----------------------+--------------------------+------------------------------------------------------------------------------------+---------------------------------|
| Sean Conley          | YES                      | Wrote a Contributions section                                                      | <--                             |
| Benj Jaffray         | YES                      | helped created get-a-gap-code-table                                                |                                 |
| Anthony Lasley       | YES                      | helped created get-a-gap-code-table                                                |                                 |
| Dylan Doelling       | YES                      | helped created get-a-gap-code-table                                                |                                 |
| Justin Bengtson      | YES                      | Worked on finding improvements and MIs                                             |                                 |
| Chase Jacobs         | YES                      | Worked on the "CLEAN UP" todo, as well as changed assertions to be classwide       |                                 |
| Jonathon Dawson      | YES                      | Worked on finding MIs                                                              |                                 |
| Grayson Hadley       | YES                      | Verfied the "make-huffman-tree" function using the list of nodes                   | Created "get-ancestry" function |
| Ryan Gewondjan       | YES                      | Worked on the "CLEAN UP" todo, as well as changed assertions to be classwide       |                                 |
| Curtis Wakley        | YES                      | Worked on having "make-node-list-from-table" produce a maphash w/ Jon Comeau       |                                 |
| Ty Kennington        | YES                      | Made this table                                                                    | This table                      |
| Taylor Isaacson      | YES                      | Helped create get-a-gap-code-table                                                 |                                 |
| Jonathan Steele      | YES                      | Helped manage Repo as repo-owner, wrote a lot of Elisp code, ask lots of questions | Starter Code for steps #1-3     |
| Mikah Chapman        | YES                      | Contributed a bunch of code                                                        | Code in many sections           |
| Will Mildenhall      | YES                      | Document edits, finding multiple MIs throughout to be corrected.                   |                                 |
| Justin Chandler      | YES                      | Worked on creating a new and improved "make-node" function.                        |                                 |
| Joshua Mathews       | YES                      | helped created get-a-gap-code-table                                                |                                 |
| Joshua Berensen      | YES                      | Worked on finding improvements and MIs                                             |                                 |
| Ronald Munoz         | YES                      | Worked on creating a "make-new-node" function.                                     | Elisp function                  |
| Preston Higgins      | YES                      | Worked on the "clean up/improve" the make-gap-table functionality. Fixed some MI's |                                 |
| Taylor Matheny       | YES                      | Verified the "make-huffman-tree" function using the list of nodes                  |                                 |
| Cameron Smith        | YES                      | Worked on finding improvements and MI's                                            |                                 |
| Madison Sheridan     | YES                      | Worked on the "clean up/improve" the make-gap-table functionality. Fixed some MIs  |                                 |
| Ashley Loo           | YES                      | Worked on improving the get-a-gap-code-table                                       |                                 |
| Kathryn Hollingshead | YES                      | Worked on finding improvements and MIs                                             |                                 |
| Zach Newell          | YES                      | Verified the "make-huffman-tree" function using the list of nodes                  |                                 |
| Luke Hagen           | YES                      | Verified the "make-huffman-tree" function using the list of nodes                  |                                 |
| Michael Capawana     | YES                      | Worked on the "CLEAN UP" todo, as well as changed assertions to be classwide       |                                 |
| Jonathan Comeau      | YES                      | worked with Curtis Wakley on converting the node list into a maphash               |                                 |
| Matt Wyndham         | YES                      | Worked on Compression Ratios sections and helped verify Huffman encoding           | Compression Ratios sections     |
| Brendon Welker       | YES                      | Helped individuals with GitHub/Git issues and helped with this table               | This table                      |
| Tyler Brundage       | YES                      | Helped with code testing and grammar adjustments                                   |                                 |
| Andrew Payne         | YES                      | Checking for and correcting MIs                                                    |                                 |
| Samuel Tew           | YES                      | helped created get-a-gap-code-table                                                |                                 |
| Paul Land            | YES                      | Worked on finding improvements and MIs                                             |                                 |
| Greg De Ligne        | YES                      | Worked on finding improvements and MIs                                             |                                 |
|                      |                          |                                                                                    |                                 |
|                      |                          |                                                                                    |                                 |
|                      | 100% Participation       |                                                                                    |                                 |


* DONE What Is True?
  CLOSED: [2019-03-08 Fri 23:05]
   This is a tool that allows us to assess ourselves on how we did
   with this assignment. Check a box (using , ,) if warranted.

   What is true of our experience in general?
#+name: assertions-in-general
  - [X] We had fun.
  - [X] We collaborated with one or more classmates.
  - [X] We learned something new.
  - [X] We achieved something meaningful, or something we can build upon at a
    later time.

   What is true of my report on what we learned?
#+name: assertions-about-report
  - [X] We wrote a sufficient number of well-written sentences.
  - [X] We reported what we thought about while doing the problems.
  - [X] We reported on any connections we found between these problems and
    something we already know.
  - [X] We reported who were and what contribution each of my collaborators made.
  - [X] We reported on *three different* compression ratios (see assertions about
    answers).

   What is true of the \ldquo{}mechanical infelicities\rdquo (misspelled words, grammatical
   errors, punctuation errors) in our report of what we learned?
#+name: assertions-about-MIs
  - [X] There are fewer than four.
  - [X] There are fewer than three.
  - [X] There are fewer than two.
  - [X] There are none.

#+name: assertions-about-answers
  - [X] We wrote an elisp function to make-frequency-table that takes a
    list-of-gaps and populates the data structure created by
    =(make-hash-table)=.
  - [X] We wrote an elisp function to make-node-list-from-table that takes the
    table-of-frequencies and returns a list of nodes.
  - [X] We wrote an elisp function to make-huffman-tree that takes the
    list-of-nodes and returns a Huffman tree.
  - [X] We wrote an elisp function to get-a-gap-code-table that takes a Huffman
    tree (or a list-of-nodes) and returns a code-list as a list of (gap . code)
    cons cells.
  - [X] We wrote an elisp function to encode the data given the list-of-gaps and
    the code-list.
  - [X] We wrote an elisp function to encapsulate the above-mentioned elisp
    functions (in order) in one encode-first-ten-million-primes function that
    takes no parameters.
  - [X] We correctly calculated the number of keys in the hashtable of gap sizes.
  - [X] We correctly calculated the number of bits per key with a fixed encoding.
  - [X] We correctly calculated the total number of bits encoded with the Huffman
    encoding.
  - [X] We correctly calculated the total number of bits encoded with the fixed
    encoding.
  - [X] We correctly calculated the compression ratio from this fixed encoding.
  - [X] We correctly calculated the size of the first ten million primes encoded
    as 32-bit integer binary data.
  - [X] We correctly calculated the compression ratio from the binary size.
  - [X] We correctly calculated the size of the first ten million primes encoded
    as ASCII data.
  - [X] We correctly calculated the compression ratio from the ASCII size (just
    the primes, nothing else).

#+BEGIN_SRC elisp
; (org-sbe "time-for-fun.org:calculate-score")

  (calculate-score
   (quote
    ((in-general 1 1 2 2)
     (about-report 5 5 5 5 6)
     (about-MIs 2 2 2 2)
     (about-answers 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4))))
#+END_SRC

#+RESULTS:
: 100
